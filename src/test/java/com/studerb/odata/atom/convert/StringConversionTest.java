package com.studerb.odata.atom.convert;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.math.BigDecimal;
import java.util.Date;

import org.apache.commons.beanutils.ConversionException;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.beanutils.converters.BooleanConverter;
import org.apache.commons.beanutils.converters.ByteConverter;
import org.apache.commons.beanutils.converters.DoubleConverter;
import org.apache.commons.beanutils.converters.FloatConverter;
import org.apache.commons.beanutils.converters.IntegerConverter;
import org.apache.commons.beanutils.converters.LongConverter;
import org.apache.commons.beanutils.converters.ShortConverter;
import org.apache.commons.beanutils.converters.SqlTimeConverter;
import org.apache.commons.beanutils.converters.StringConverter;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.commons.lang.time.FastDateFormat;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;
import org.junit.Test;

import com.studerb.odata.edm.UnsignedByte;

public class StringConversionTest {
    final static FastDateFormat isoDateTimeFormat = DateFormatUtils.ISO_DATETIME_FORMAT;
    final static Logger log = Logger.getLogger(StringConversionTest.class);

    @Test
    public void stringToDate() throws Throwable {
        String stringDate = "2010-03-01T16:13:20-05:00";
        DateConverter converter = new DateConverter();
        Date date = (Date) converter.convert(java.util.Date.class, stringDate);
        assertTrue(date.getClass() == Date.class);
        log.debug("using DefaultDateFormater: " + isoDateTimeFormat.format(date));

        DateTime dt = new DateTime(date, DateTimeZone.UTC);

        DateTimeFormatter fmt = ISODateTimeFormat.dateTime();
        log.debug("Date formatted: " + fmt.print(dt));

        assertTrue("year should be 2010", dt.getYear() == 2010);
        assertTrue("Month should be 3, but got: " + dt.getMonthOfYear(), dt.getMonthOfYear() == 3);
        assertTrue("Day of month is 1", dt.getDayOfMonth() == 1);
        assertTrue("Hour is 21", dt.getHourOfDay() == 21);
        assertTrue("Minute is 13", dt.getMinuteOfHour() == 13);
        assertTrue("Second is 20", dt.getSecondOfMinute() == 20);
        assertTrue("Millisecond is empty", dt.getMillisOfSecond() == 0);
        assertEquals("zone should be UTC: ", dt.getZone().getID(), "UTC");
        log.debug("Zone: " + dt.getZone().toString());
    }

    @Test
    public void stringToDateTime() throws Throwable {
        String stringDate = "2010-03-01T16:13:20-05:00";
        JodaDateTimeConverter converter = new JodaDateTimeConverter();
        DateTime dt = (DateTime) converter.convertToType(DateTime.class, stringDate);
        assertTrue(dt.getClass() == DateTime.class);
        dt = dt.withZone(DateTimeZone.UTC);
        DateTimeFormatter fmt = ISODateTimeFormat.dateTime();
        log.debug("Date formatted: " + fmt.print(dt));

        assertTrue("year should be 2010", dt.getYear() == 2010);
        assertTrue("Month should be 3, but got: " + dt.getMonthOfYear(), dt.getMonthOfYear() == 3);
        assertTrue("Day of month is 1", dt.getDayOfMonth() == 1);
        // hours change with real timezone handling
        assertTrue("Hour is 21", dt.getHourOfDay() == 21);
        assertTrue("Minute is 13", dt.getMinuteOfHour() == 13);
        assertTrue("Second is 20", dt.getSecondOfMinute() == 20);
        assertTrue("Millisecond is empty", dt.getMillisOfSecond() == 0);
        assertEquals("Zone should be UTC", dt.getZone().getID(), "UTC");
        log.debug("Zone: " + dt.getZone().toString());

        dt = dt.withZone(DateTimeZone.forOffsetHours(-5));
        log.debug("Date formatted: " + fmt.print(dt));
        log.debug("Zone After setting back 5 hours: " + dt.getZone().toString());
        assertTrue("Hour is back to 16", dt.getHourOfDay() == 16);
    }

    @Test
    public void stringBooleanConverterTest() {
        BooleanConverter bc = new BooleanConverter();
        final String TRUE = "true";
        final String FALSE = "false";
        Boolean booleanTrue = (Boolean) bc.convert(Boolean.class, TRUE);

        log.debug("Value of true: " + booleanTrue.toString());
        assertTrue("Should be true", booleanTrue);

        Boolean booleanFalse = (Boolean) bc.convert(Boolean.class, FALSE);
        log.debug("Value of false: " + booleanFalse.toString());
        assertFalse("Should be false", booleanFalse);

    }

    @Test
    public void defaultBeanUtilsConvertTest() {
        fail("not implemented");
    }

    @Test
    public void stringToSqlTimeTest() {
        String time = "13:20:00";
        SqlTimeConverter converter = new SqlTimeConverter();
        java.sql.Time sqlTime = (java.sql.Time) converter.convert(java.sql.Time.class, time);
        log.debug(sqlTime.toString());
    }

    @Test
    public void stringWithPrecisionToSqlTimeTest() {
        String time = "13:20:00.123";
        SqlTimeConverter converter = new SqlTimeConverter();
        java.sql.Time sqlTime = (java.sql.Time) converter.convert(java.sql.Time.class, time);
        log.debug(sqlTime.toString());
    }

    @Test
    public void stringWithPrecisionTimeZoneToSqlTimeTest() {
        String time = "13:20:00.234-05:00";
        SqlTimeConverter converter = new SqlTimeConverter();
        java.sql.Time sqlTime = (java.sql.Time) converter.convert(java.sql.Time.class, time);
        log.debug(sqlTime.toString());
    }

    @Test
    public void stringWithTimeZoneToSqlTimeTest() {
        String time = "13:20:00-05:00";
        SqlTimeConverter converter = new SqlTimeConverter();
        java.sql.Time sqlTime = (java.sql.Time) converter.convert(java.sql.Time.class, time);
        log.debug(sqlTime.toString());
    }

    @Test
    public void stringToDateTimeOffsetTest() {
        String dateTime = "2000-12-12T12:00";
        fail("DateTime not successfully created");
    }

    @Test
    public void stringToCalendarTest() {
        fail("Calender not successfully created");
    }

    @Test
    public void stringToUnsignedByteTest() {
        String arg = "FF";
        UnsignedByteConverter converter = new UnsignedByteConverter();
        UnsignedByte unsignedByte = (UnsignedByte) converter.convert(UnsignedByte.class, arg);
        assertTrue("Should equal 255 but got: " + unsignedByte.intValue(), unsignedByte.intValue() == 255);
    }

    @Test
    public void stringToSignedByteTest() {
        String arg = "-125";
        ByteConverter converter = new ByteConverter();
        Byte b = (Byte) converter.convert(Byte.class, arg);
        log.debug("Value: " + b.byteValue());
        log.debug("Int Value: " + b.intValue());
        assertTrue("Should equal -125 but got: " + b.intValue(), b.intValue() == -125);
    }

    @Test(expected = ConversionException.class)
    public void stringToSignedByteTooBigTest() {
        String arg = "-129";
        ByteConverter converter = new ByteConverter();
        Byte b = (Byte) converter.convert(Byte.class, arg);
    }

    @Test
    public void stringToByteArrayTest() {
        String base64Encoded = "FRwvAAIAAAANAA4AFAAhAP////9CaXRtYXAgSW1hZ2UAUGFpbnQuUGljdHVyZQABBQAAAgAAAAcAAABQQnJ1c2gAAAAAAAAAAACgKQAAQk2YKQAAAAAAAFYAAAAoAAAArAAAAHgAAAABAAQAAAAAAAAAAACICwAAiAsAAAgAAAAIAAAA////AAD//wD/AP8AAAD/AP//AAAA/wAA/wAAAAAAAAB3d3d0AENzQHQ3Nzc3Bzd3cENwd3d3d3d3d0N3d3d3cABTQEBnNXd3dQB0AABAAFAEAEJQAAB3d3AAQhcHNzc3N3N3dzAEBAcHM3cwc3NyUAAEM3QFMAAANzc3N3c3dgQHQ3d3c0dzc3cEdjd3d3d3d3dUd3d3d3dAB1AlBXMXd3dQU1BwAFAAAAAEAAQABXd3BAQDN3Nzc3N3M3BAAEBAcHEhQ3c3NzYQA3IAAHN3d3d3d3c3dwRARCdDcwc3d3dzQ0F3d1d3d1dHcHdXd3d3EEAHUAB3dXd3cEBhQ0AAAAAEAAAAAAN3dwAAd3Nzdzdzc3cEAEAAAAcGFjc3N3NTYXMEAAQANzdzc3NzdSBAQEBFN3R3dzc3N3d3d2d3d3d3dwV3d3d3d3AAR3BHdzd3d3AFEAQQAAAAAAAAAAAEd3dwBzc3N3N3NzcgAAQAQEBAcXNzc3c3Nzc0AAQAB3d3d3d3dzZEBAZAQkcHNzd3d3dzd3dXd3d3d0V2F3d3d3d1ABd3B3dTd3d1AGUAAAABQAAAAAEEAAV3dzNzc3N3M3N3FgQAQAQAAGN3N3Nzc3NzAAAAQEBzc3NzdzdwBAYEBgQAd3d3Nzdzd3d3d1d3d3d3B0J3d1d1d3d3d1d3dXd3dgFzQAAAAhMAAAAEAAQWd3d2Nzc3N3N3MCFAAAQAQAU3Nzc3Nzc3NABAQAAAd3d3d3N1NlJEQEBARzc3N3d3d3d2dWd3d3d1NHV1d3c3d3QHd3cHdxN3d3FWFBBQQ1F1AAAAAAAAABd3EABDc3N3IAcAMEAABABzc3Nzc3M3ckAEAAAEBHNzc3N3Y0U0AEJEBXN3d3c3c3d3dXd3d3d3d2dScHc1d3dxdzd3V3V3d3d3AUAEADcHcQAAAAAAAEBHd3BwM3N3IlNzNwQwQAAHFjdzc3NzdgMQQABAQAB3d3d3Nhc3B0QEQEN3c3N3d3d3d3d3V3d3d3dXd1dHdzd3dxd3d3dzcXd3d0AAAAV1MXYAEAAAAAAAAHdxAAc3M1EnN3MzQwQDc2FgNzd3N3NQYABAAABAc3M3NlN3N3NzQEB3I2V3c3N3d3d3d3d3d1d3d1Z3BXdXd3dwV3YXd3dXd3cAUAASc1dxAEAAAAAABAAHdwUBE0A2FDMHEhQBVzAAEGFzN3AANxcAAEAAA3d3d2U0N2N3BwQHc0QDJzd3d3d3d3d3d3d3d3d3V1J3c3d3E3dwR3dzd3d3MAEFdRc3UAAAAAAAAAAAd3cAE0AAQ3Nzc3ADNyNxA2AnN3MXNzNzNDQAQDc3NkBDZ3c3cHB3NzRTdHd3d3d3d3d3d3d3d2V3dSUld3d3cXV1QAd3Vxd3d0AHADB3dwAAAAAAAAAFBHd3U3cxAAAHN3Mgc3M3YAQAUzYDYAclY1IAADNQd2UGBHBzdzdwc3d3JAcHN3d3d3d3d3d3d3V3V2d3VBdXd3dzdgABdzcRd3cQFABXN3cAAAAAUAAAAAAAdzQXB3E3EFI3Ezc3MzcBADNAQBc3MzclNDQ3IEBDBEBHVhdwd3dzc1JQd3Und3d3d3d3d1d3d3V3Vjd3d3d3d3FAQHd3c1d3cANTcVdwAAAAAAAAAAQ0AAdzQ1EAUCEFAHc3N3c3N3NwAAQAcXc3MANzc3AGBEBEBCdgNzc3N3d3d3NGVld3d3d3d3d3d3d3dWVUd3d3d1d3AAAHdxd3d3UAcWc3UAAAAAAAAAAAAQBXdRUzVwFQcTADY3MzM3M0AEBABDYzQwd3NzUwBEAEAGBHF3d3d3c3c3N0YXV2d3d3d3d3d3d3d3dxY3c1d3QncEBBd3N3d3dxBzFxdwAAAAAABQAAAEAAB1AHJXEXMFNxEAEGd3cyQAAABABDVDB3M3NyNEBEQEQEBGNzc3c3c3d0NHVnd3d3d3d3d3d3d3U3Vld1d3dxQHQABhd1NTd3dxVzF3UAAAAAAAAAAAAUAAZzQVAWNBMEFAUDEQAzcAQEBABABCMHc3dzc3MEAEAEQEF3d3c3d3dzdENHVld1d3d3d3V3d3dWdHd3d3d3dzdDQAV0d3d3d3d3d3dwEAAAAAAAAAAAAAABdzc1AUF0EDABdSERAQAAAABABABDczc3Nzc3QEREQEB3Nzc3dzc3d2FnQ2d2d3d3d3d3d3VlZ1d3d3d3d3dABAVSEHc3F3d3d3d3EAAAAABQBAAAAEEEN3V3UhQXAXFBNxAFIXcREEBABEAFNzdzc3Nzc0AEAAQ3Y3d3dzd3d1JXRXdXV1d3d3d3d3d3d3F3d3d3d3d1NUBDYEB3dXd3d3d3cQBQJQAAAAAAAAAQQWdScQFQcAYSFHcQUBBxMEAAAEAAc3c3Nzc3NxZEQHRAc1QkFzdzc3J3d3JWd2d3d3d3d3V3d1dWV3V3d3d3d3BxQFQFB3c1cXd3d3cBAFAFAAAAEAAARwdXNRcEA1BRQUBxcBBxF3ExAEAEBzczc3Nzc3YwAAQBZ3c2U0dzd3dXNzd3dWV3d3d3d3d3d3d2d3d3d3d3d3d3dwcBYXc3c3NTV3d3BQAWAAQBQEAAABVwd3cHE1cwBxcVJQNTdwAQNhAAAzcCQlNzc3MBQHRAdzc3QHQyd3FjZ3d3d3d3d3d3d3d3d3V3dXd3d3d3d3d3U1N1d1dld3d1N3d3dxAUNQUAAAAAAABCAHdQU1cxQUE2EFA0FRAVNTMABwdwBQAnNzcEMjMBZ3N3dzQAR3YWdxd3d3d3d3d3d3d3d3d3dXd1d3d3d3d3d3d3d3dzVwR3dzV3d3cFIFAAAFYQAAAABQRXNBchVhQXBRYTUXAHc1JwA3M3MEISU3c1I3NXdzd3Nzdzd3NTRAd3d3d3d3d3d3d3d3d3d3d3d1d3d3d3d3d3dxd3dAdwd3dzd3dwEFAABAABQAAAAFADB1N1FwEBYVMFBDQDcTUxATc3c1IQQDcwQlBzI3N3d3dzdzd3JARAZXJ3d3d3d3d3d3d3d3V3d3d3d3dXd3d3d3d3d3cEUXd3dTd3dwEABQAFBAAHMEAHBXcFNlNQcxcFMXFxQXdTQxY3M3NzQxcwQAAwNzd3N3Nzd3N3JEQGFlJ3V3d3d3d3d3d3d3d3d3d3d3d3dnd3d3d3d3d3UGdXc3d3d3EHAFABQAAHcUEBdQB3MUElBxRwUlc3EwRxJBEBc3dzNjdyQABAQ0Nxd3d3d3c3cEBAdEBld3d3d3d3d3d3d3d3d3d1d3d3d3V3d3d3d3F3d3BXJ3d3d3d3EFJQBAAAcQQEBHAHdxQQUHNTFQU0ZSUDU1MQQxNSN3M3AAQEAAA0AnNzNzc3cXQEJENHB0d3d3d3d3d3d3d3d3d3d3d1d3d3d3d3d3d3d3d3BXF3F3d3d3ABQwAAcxQAABAUBTQQcBQUNWBzQRBQUQcXMRdwMWETcAQAAAQEAwF3d3d3d3Y3dEBkFHQ3d3d3d3d3d3d3d3d3d3d3d3d3Vwd3d3d3d3d3d3d2V3d3d3dxABQAUFQAAABAQAdxcFNDBQEUFBY1AWcSV3YUNTU3cQAABAQAAEB3Nzdzc3FhZSU0FGQHd3d3d3d3d3d3d3d3d3d3d3d3d3ZXd3N3d3d3d3dwQHdzV3d3d3FAFCAAAAAAAAB3F1IUBBBxYQBxU3FxFQcBAABwVzQ0AEAABAADM3d3d3dWN3NzZEJTd3d3d3d3d3d3d3d3d3d3d3d3V1dxdHd3dXd3d3d3dQcQV3d3d3dwAEBQAAQAQAUnFFYQUxNBBBU1EEBQcXAQBXEFAUNBACQABAABc3dzc3FzYXN3d1NUR3dXd3d3d3d3d3d3d3d3d3dXdndld0NHd3N3d3d3d3cFdgQ1NVN3cEAXBQAAAAAAVHMRZTVEFxBDBwExNQcXMQAHEBYRADcQBABANzYzd3d2BBZ3Nzd2N3d3cld3d3d3d3d3d3d3d3d3d3V3d1ZUNXd3d3d3d3d3cHUHBAJ0FHAAQHBAAAdQQHFFdxdzEGF3BBUGFwEWF3UBQBQBc0AzYDAAA3ADQnFzBAZjU3d2F3c3c0d3d3d3d3d3d3d3d3d3d3d3d1d3d1Z3d3d3d3d3d3d0MEAFcSF0FAUAAAVQAAdwA3BXFBQUEFFzQUBTQTUwFzFCFBADdxMAU3cAMAF2BEBEBXZSc3d3d3d3d3d3d3d3d3d3d3d3d3d3d1d3dWFjV3d3V3d3d3dwQ1QQAXdxc1NAAFBSAHBXcUQAcGFzUwUwFTEHNBd3AUEEAUMAAAA0dzMzAEACBAYEQEJDd1d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3V3d3dzd3d3d3dQc3d3A3d1d3EAQ3d1BSUwUzVxFQdTU3cEJWFxcQFxA1AUAFMFMQAAN3dhAEA0BEQAQEBAc3d3d3d3d3d3d3d3d3d3d3d3d3d3V3d3dXV3Vld3d3d3d3d3F3d3d3dXdzd3QAV3AGF3UlQXdyFwNAUXEBAUFxJQBAQlAUN1BBQAAQADc2E1MEQERCRAR3dzd3d3d3d1d3d3d3d3d3d3d3d3d3d3d3d3d3c3d3d3d3d3d3d1cXFzc1NXdwA3YQdXd3EDQ1FXBRQXYFNBYHcUEwEAEQQUEAAAEAQABzc3MgQARABEBWN3d3N3d3d3d3d3d3d3d3d3d3d3d3d3d3d3Vld1d3d3cXd3d3d0Ald3dXdnc3c1dBR3N3d3dRQEMFJBJREkFxBTUDUQEHAAQQBxElADEANzcgQERCBEQkN3c3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d1d3d2d1d3d3dXd3d3cFVhQBYUEBQBRwdhdXF3d3dxcQcRNBQ0FTBBcQFDBBcXEwAAEHE1FBAXNxQABABHJAV3N2d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d1dXd3d3d3NXd3d3AGFhYUAWRAAHFBd3NTF0N3d3dXdBQ0EEFBBxYQFBAABHFxFAAFADEAc3MhBABEQEF3N0NSc3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d0dXd3d3d3d3cUcUFFBwYQAWUGVnU1NDU1cHd3dwFhcTQwFXBRBwAAVxAEAEMRUAQUAAJAUgAHJAd3N3QlZXd3d3d3d3d3d3dXd3d3d3d3d3d3d3d3dXd3V3dnd3d3d3d3BDQ0MHBBQUdwcXNTd1N3dxcXd3d3U1NBBGcxMFAQAFMFABAABAEAABUBMwNQQEF3N3c3VhYXd3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3V3d1d3d3d3d3d1BUFAQFBAQWUEcXFlNxd3d3d1NTd3d3FxEQdQcXBSFBQHAUAQAAcQADAHc3IAd3N3c3dzd3d3Qld3d3d3d3d3d3Vzd3d3d3d3d3d3d3d3d1d1d3d3d3d3cHAENDQlIXcWU3dTE1Nxd3d3d3dXF3d3d3cXNRZTBXAQEFAQFxBBcQQQMwc1MHN3c3dzd3d3YXR2d3d3d3dXd3V3dXd3d3d3d3d3d3d3d3d3d3V1N3F3F3cFcEFAUFdBZxcXF3U1M1d3d3d3d3cXR2V3cXAlNQEHFAQ0BWEBNxAAAHNzMgB3c3dzd3c3JBZHd3d3d3d3N3F3d3d3d3d3d3d3d3d3d3d3d1d3d3d3UGd3RwcUMHcld3F3cHcTdxR3d3d3d3d3dzUXNHdTUUBAdAAQEAAQQFAAAAU0MlAXc3dzd3c3dFRldXV3d3d3dXd3N3cXdXd3d3d3d3d3d3d3d3d3V3dHVwdXVzVwc1QUVzU3Fxc1dxc3F3d3d3FzR3d3d1NQd3cxFAMUBUBQUBAAABAAIUMCc3dzd3N3d3NlJHdnZXd3dzd3dXV3d3d3dXd3d3d3d3d3d3d3d3dXdyVwdyVnV0d3c3d3U3dxc1NxU3dzd3V3VzV3V3d3dxcXQAFXEAMQAAVhAAdxBAIAdzdzd3N3c1YWUld0dXd3d3d1c1d3NTV3d3d3d3d3d3d3d3d3d3d3d1dXd1dXU3dXExEXd3d2F1c1dzEXdXcXN3d3F3d3d3d3dxcWEDUEBTAAFxBRAAAFNzNzd3N3c3Zzd3d1Z3d3d3d1d3d3c1d3d3cXd3d3d3d3d3d3d3d3d3d3d3d3dzd1M2EDdxcXEXczU3EQd3dzd3U1d3d3cXN3d3dxdTdXEAEEEUAEAAQAA3c3N3N3c3dxd3N3d3V3d3d3d3dXc3U3F3d3d3d3N3d3d3d3d3d3d3d3d3d3d3V3E3URMRdxcXcXVzVzdxd3dXd3dxd3d3dXF1ZXFgdXNDFAUEAAARAAAXITc3N3c3dDZyd3d3d3d3d3d3dzc1d3U1c1d3F3d1d3d3d3d3d3d3d3d3d3dXNzd3ETNRMTd3cXc3VzQRc3Fzdxc3Fxd3d3d3dxdQUXBUFAEhAXEENQADY3Njc3c3dwBFNXd3d3d3d3d3d3d1d3czQ1d3d3dXF3F3d1c3d3U3d3dXc3d3c1dTUXcVIQNXd3dxdTdTdwF3dXF3V3dzV3d3d3dwc1IFIHBTUFBAQXMDcQAANzc3dDBGQ2dzd3d3d3d3d3d3VzdxUVNxdxd3N3d3d3d3V3d3dXc3d3dXNXFxMRcxAxExNzU3F3N1N3EXd3c3dTc1MHd3d3d3d3V1dxUAAUMQATAQNyQAAHNzdwBEBARAd3d3d3d3d3d3dzdxdzQ1d3d1NXF3F1NTU3Fxd3d3dTd1N3c3AXEwFxExEBd3FxcXFxdTc1cXdTd1d3U1JXd3d3F3Zxd3FXEHcwBRBzMQBwAwNyBGQEBgR0V3d3d3d3d3d3d1d3FzU1NXN1MXF3N3dzU3d3dTcXd1N1F3U3MBUxEhAxMRd3c3d3dxNRd3cXdTc3FzU1JWd3d3dxd1B3NwBXFBJRN3IwAAc0AEBARARSQnd3d3d3d3d3d3U3dXNTd3c1c3U1cXd3FxdTV3N1d3c1N3dTERcTFzFTMBBxd3VxcRd1JxN3d3d1dXcTcVMXcHd3d3cQQUQ1MAB1EnM3NTNwAAAEBkBGBHV3d3d3d3d3d3d3dTc1dxdTV3FSFzdXNTU1N3N3U1NXd3F1M3FxMHNQMVETd3FzF1N3E3FHdzU3U3NxdxJxRxdXdXd3cxAABBFBAwNzc3M2AAAARAQUBHQ3d3d3d3d3d3d3cXd1dxdTd3MXMXFxcXFxYXF1dzEHN3U3c1cTA3F1NxA3AXd3V3c3U3cXMXV3c3F1dxNxdxcFJTcXd3d3ERAGEEFzc3M2BAQAAEBGY0BHd2d3d3d3d3d3d3dxd3dzcVNXcXcXV3dxNTEHFxd3EXF3Uxc1cXEXFxdxExB3dzcXU3UxcXE3F1dXNxdxdTd3cFBUdTV3d3dxAXEQNzc3UwAAQAAUBHUlN3dXd3d3d3d3d3d3F3d1NTd3c1dxdzU3FxMXEXN1NTd3EzV1cxcXMwNxExARd3d3c3cXVzcXd3dzd1d3BTF3N3d3AQdnd3dSV1JXA3NzcCAAAABAY0BSd3d3d3d3d3d3d3d3cXV3c3F1NTU3E1NTdXMBcBcxU3N1MXdXNzFxNRFTU3AxE3d3dTVxdzNTElc1NXd3MTc3MEc3c3d3FQUENQQAUBdzcgAQUAQAAHUld3d3d3d3d3d3d3d3d3cXNXVxY1d3F3U1N1MVNxcXFzE1NzcXN1cXFxMDNTERAwF3d3d3dzV1NXE3d3d1N1dTU1AAQ3c3d3d3cUAQUwA3NhA3MyAABABSdzdzd3d3d3dHd3d3d3d1cXd3NRU1NXE3FxN3NxcRMDV3U1cXNXc1NTcXFTFDcREXd3d3cXdzdxMXU1NTd1czdTUxQAA3c0EnN3c2EAU0MkMEM0NzQAADd3d3d3d3d3dXd2V3d3d3dzVxd3Nhd3c3U3N1d1NTUwFTcTUxdTcxcTFxcTE1MXMDF3d3d3dxd1NxY3d3d1NzV1NTBwQEQgQ3d3c3d3dzUAQAQzczMAA3Nzdzd3d3d3dHZ1dXdnd3d3F3N1d3FXNxcxdXFzc3MTASFxdTFxN1NTEFNTAQcxdRMQd3dxd3F3U1NTU3d1c3NXE3NTEAAANTc3Nzdzd3NAAABDdDJwATc0N3d3d3d3d3d1Z2d3V3d3d3V1c3dXNXd1cTc3dXUXNRFTUxNTElNxNBMQMRMRUxNxE3d3d3Fxdzdxc3V3c3V1N3UXNTBAQENzc3N3N3NkAEBAAAM1IXc3M3d3dzd3d3d3d1dXZ3d3d3d3c1d3NTd3c1cXUXNzUBMwExcTAxNTVxMXcRcQNxA1Mhd3d3d3dxdTVxc3d3d3N3U3cXFwABc3Nzc3M3NzAEAABAQEABIzc3M3d3d3d3d3d3d2d1d3d3d3d3VzU1NQdRcxd3cXE3NRUxFxcRUVNTA1NTNQMREDUhEXd3d3d3N3dzFxd3dXd3dTdTQ3EAcyc3Nzc3c0JQQAQEAAADc3NzY3Nzd3d3d3d3d3d1d3d3d3d3V3NXc3FzE3F3UxcXcREyFwMTAxITU1ExNXExNQNTExd3d3d3d1c3cXd3d3c3FxNxc3FSFyBQBzc3NzAwFgBAAAQANzc3Nzc3d3d3cnd3d3d3d3d3d3d3d3NXc1dTUXFwFzV3cXd3FRE1NRARYXExARITEQMRE1MTV3d3d3c3cXdxd3d3d3d1dzUXMXNwAwA3NzIWFzNAAAQAd3Nzc3M3N3d3N0dHd3d3d3d3d3d3d3d3Nxc1NzUwFxcxd3cXc3N3ExMTUxcXFzFxcXExMHEwFzU3d3d3dXc3d3d3d1d3c3FzU0E3MAQANyUkA3JzNwQAISAGNzc3NzB3ckQ0Vld3d3d3d3d3d3d3dXV3V1cTQ1NxV3d3d3cXcXFhcQETc3ESETATEBU1MTd3d1d3d3d3V3d3d3d3cXdTUSFzchQAFzAAASczc0AANzcAMANzdzAAN0dDRyd3d3d3d3d3d3d3d3dzdTc3FxETV3N3d3dxdTcXFxExJXcTNRNxMXEzEzB1c1c3d3d3d3d3d3d3d3d1MQNXFzNzNzIEAEBhNzADQ3NQBAQ3NzIBM0Q0ZFR1B0d3d3d3d3d3d3d3dTdXU1NxYTU1YXd1N3NTUxMDURE1JRNxFxE1AXERc3c3c3c3d3d3d3d3dxcVNzcXEzN3NzcEAAAAA0NDBzNzYwAAM3IAAnJDRwclZ3Z3d3d3d3d3d3V3d3dTc3dxcxcSUxAXd3FTU3FxUTcwUxMVNxNxITUzBwdTcXV3Vzc3N3d3d3dzc1dXc1d3M3NwAAAAAEAABzd3NzcDA3AEAAAzZFR0VhR1d3d3d3d3d3d2d3d3d1dTVzVxFTUxdxcHNTcBExNBETcXEhE1E1NTEXU1N1dzc3d1d3d3d3d3d3VzcxczM3c3AABAQAAABzNzM3NzN3AAQAQDcwclcWVnd3d3d3d3d3d3dXR3d3U3NTdXE3MTAXFxE1N1E3E3E3NXExU1MSUxNxNTd3c3N1dzd3V1N1N3d3d3N3V3N3cwcABAAABABTc3c3c3c3AAQAAAAAB0VndyV3d3V3d3d3d3d3d3d3d3dXNTc3cXdRcXBTU1MTEHFREFNTQzE1NTVxAXJXE1d1NxdXc3N3N3dXdXdnUDM3MzcDBxAAAAACEjczczczcAAABAQAQAcWV0d3d3d3d3d3d3d3d3d1d3d3d3dTV3cXMTUTNTE1NXESNxM1MTVTA1MTcxNXN2c1N3d3N3d1NXdTdDdzcHAHN3cANzMlAEACE3Nzdzc3cxYAAAAAQAA3dyc3d3d3d3d3d3d3d3d3d3d3d3U1NTd1cXFzNRMXUnExcVE1E1cTNTUxcRF3cXFxd3U1N3dXd3dzd3NTV1MAc0ADBzNDcwAANyQAAyNzcwBAFgAAAAADd0d3d3d3d3d3d1dXd3d3d3d3d3cXd3dxdzcXU1E0NTEVJTEzcTU3MXExNTU3Nwd3F3Fzd3d3Nxc3FxcXdzc3dzMAADA3NzAHN3EAAAc3NwJTMSEAAEBhNzc3d3d3d3d3d3dnZ3d3d3d3d3d3dzdxdRd1cSU3E1MXE1NRURNDU1NTU1MxNXF3F3B3VlNTdXd3V3c3cXFlcXNXNABDcjMHA3MnAAADc0JQM2NwcAADE0MHd3d3d3d3d3Z1dXV3d3d3d3d3d3V1dzdxd3cTU1c1MXExIxJRMTNTcXMXFwNHF3F3Fjd3d3d1NzcXU3cXM3cXN3NQAAUDA3M3MwNAc0AAJSc3MAASFyAAB3d3d3d3d3dnVnZ2dXd3d3d3d3d3d3dXFxdxcQcTU1IXFxU1NxBRMRMXcWF3E0cWcXF1NTdTc3V1c3cTd1cXYXB3NwADBzc3Nzc3MwAAAENxMlByc3IAQAd3d3d3d3d3dWd1dXZ3d3d3d3d3d3F1N3N3FzFxNTUxcHNTcTETElE0dTcXcXVzdxd3c3d1d3dXJzVxd3FzdxdzU1c0A3Nzc3NzcwQAAEAABgUjNzchUAAnd3d3d3d3d3d1Z3ZXd3d3d3d3d3d3d3d3FxdHF1NTdTEVNRNRYRMWEzdWcXdjdXFwcXVxdzYXN1dWNwcXNTUhdTdxcXBzc3Nzc3YABAAAQAAwN3NzcyEhF3dwd3d3d3d3d1ZXd3d3d3d3d3d3dTcXV3UxNTExd3d3NTN1ITcVMXV3NXQXVzc3Fxc3d3dXdXc1NXU1JSdTVzdTd2Nzc3Nzc3MwAAAAQAAAdzN3Nzc3Ngd3d3d2d3d3d3d3d3d3d3d3d3d3d3d3d3d3dTF3V3dTUxNXExcRMxcXdXc3dTdXVnBxYXd3c1JTd3cWV1NRcXJRYVNTVxczc3cDQBQABAAAVzN3M3NzcwAAd3dzQ0d3d3d3d3d3d3d3d3d3d3d3dXcXF1MXVxN3N3F1cXNTFzV3d3c3VzQ0c3EXFhdhdXV3d1cBYTMTQ2FhUhcncXN1JzcwNwMABAAAJzM3czdzNzQAB3d3VnR1Z3d3d3d3d3d3d3d3d3d3d3d3d3N3UwN1N1cXE3cXcXF3dxcXV3V3UXR3cHFxd2N3dTQ1dxV1ZxdTUSUBcTc0NzcCFjNzcwBAQxAkIzdzNHAAAAdzQkFDR1d3d3d3d3d3d3d3V3d3d3d3d3d1N3cVN1cxd3U1M1N3d3d3d3dzVzQ3F3FhdxdXd3NXc1cCARUhNDQXEldBc1NTUAFzNzBwADdwAAQzdzMDJCAHVnZWR0Nkd3d3d3d3d3d3dHd3d3d3d3d1d3VxdxcSV3dzU1N3d1d3V1JTV2dXdXYXF3F3Nxd3cUdwcVJSdXEAcFUhNzU3NzAGFnNwA3NzAAADNhBANxMQAkFFBHB0U1d3d3d3d3dWV0d3d3d3d3d3d3U3N3F1NTcXcXN3d1N3d3N3d3YRdxdxdwcHcXV3Vwc3BTUhE1cABQUyF1YXFhcFADMDA3c3NgAAU0AAI3I3IAZWR3NGR2d3d3d3d3d3d2d3VnV3d3d3d3d3d1NXNxdTcXd3dXV3V3d3dTQVdDRxd1dxcWdzdzd1cXNTFSU1NBASVXBxYTUxcwQENDdzc3NzUyAABAU3MxAVBHN3U0F3d3d3d3d3d3V0dnVHd3d3d3d3d3d3NXNzdXd3dXcCVnd3dXd3c1NTQ1c3V3cXV3V3FhZRZQMTQ1NDQSFTQ1dDQxUwAHNzNzczNzQABAACA0IGN3NHdDR3d3dnd3d3d3d3d1dHd3d3d3d3d3dWd3d1d3d3d3dwdXF3V3d1dSUlc1cHV3YXdzcXcUF1NxMEBTUlEABXJRUjUxUjUXNzd3Nzd3AAAAAEAAQBczN3V3N3d3dHd3d3d3d3d3B0N3d3d3d3d3d3d1ZXd3V3dXd3d1NnV3dXdzd1NSVwd3dxd1N1dzQAQAU0ABclNQUDUlFjdRJSEWMDNzM3NzMSAAQAAAQDMzd3dDdHd3N3Nxd3V3d3d3d3d3d3V3d3d3d3d3d3dld3dXd3d1d3V3d3c1d1N0dzQQB3VwFlc3BAAAU0EVNBU0MAUHEHFBBxBQcRUGN3c3NWAAAAAEAAA3dzN3Nzd3d3d3d3dnB0d3d3d3d3dyd3d3d3d3d3d1d3d3d3d3d3V3FDV3d1d3U1dTQXU3d1F3Q0AAAAc0IWFhcUEABXAWFxBxJScDEAM3NxITQAAAAAE3MyNzdHd3N3d3d3d0FnR3d3d3d3d3d1d3d0d3d3d3d3d3d3dXd3d3d3d3dXc3cXdzVxYQdXc3d3UQAAABQQUUFwcQcAAAAQEHE1ERcUA3clAHNzMAAAA2Awc3Nzd3d3d3d3d2F2VFNDdXd3d3d3d3d2V3d3d3d3d3d3d3d1d3d3V3d3d3V1ZxdWNHV3dldxdTQAAAR3BQYXBxZQAQABQwMSUwZzYDcAAAc3JzAAAXMAAAM3N3N3d3c3d3dWBWNkdGd3c3d3d3d3dTZXd3d3d3d3d3d3d3d1d3dXV3d3dzV2N1NTVxc0d3dAAQAAFTZRQXUBAUBQUhEUFQdRBRc0AEBDc3NzADMnAAADcgd3dzd3d3NjZWFEFkF3N3d3d3dzZGR1ZXd3d3d3d3d3d3d3d3d3d3d3d3V3F1d3d3B1U1NTdQBAQWdTYXAXdxAQAAUlAAMQNxJQAEAAAENwADdzEwAAMAAHd3d3N3d0dXNGQ0Q3d3d3d3dzZ1NXQ1Z0d3d3d3d3d3dXVnd3d3d3d3U3cHd3dXd3Und0d0NFJSU1NRYVYVB0FBAAEAAwQ0ElAEAAQEAABzdzJzYzEgAABzd0N3dzdzc3dQRDdWNHd3d3R1d0YGVnB3d3d3d3d3Vldnd1d3UlR3d3dxdxc1d1dTVwU3F1c0F1d2UlFhcnUQAEAAAQBRcWUAAAQAAAQ3N3M3NzMSAAAAd3N0Nzdwd3dwNzd3YXNDd3d3dzc1dWFHd3d3d3d3d3d3V1dnV3dzR1d3dzd1d3Y3Z3d3V3c1c1BxcXUHF1dSQFAQAQAFIFAQBAQAAAQAY3c3c3M3IAAAAEN3A3dgRzc3d0dzc3RGd3c3Bzd3dyVHd3d3d3d3d3d3VndnV3d1d3B1cXR1d1NXU1dxdyUldld1Z1YXcWFhNTEhQBUAAFAEAAMwQAQANxczc3M3cAAAAAB0N3dwQGFnc0Nzd3dzcXNwZXd3d3R3N3N3U3d3d3d3d3dWV3d3d3V3cndzE0N3d3RzV3F1dwV3BzVxcFYUBWFAUAFwAEEAAAU3MDBANyBydzc3cwAgAAAAA3dwBAQENxQ3d3c3N3d0RlYnc3Nzd3d3R2d3d3d3d3d3d3d3d3d3dXV1dXQxV3cXNXd3UHV3NXdXFlNTUlcXBQBTQAEQBAAzc0AAMXEAABN3NyADEAAAAHdwdEBEJAQndzc3d3c0BhQEUHd0dzd3d3NXd3V3d3d3d3d3d3d3d3d3d3dTV3d3dXd2V3c3NHdTd3UlZSVQdBQ0FxBAZQABZzc3BzcjQEAnM3AXcnMEAABwBAYWAEBAU3d3c3c3dwRgcGQ0N3d3d3N3d3RyVnd3d3d3d3d3d3d3dXdTZSVzV3EHdWF3V1NWdSV3U3VwcUNwU3ZQEBBAADBAA3NzcwAAc0AGAzU3ABQTdEBgRFQEBzdzc3dzdDR0BUQUR3c3d3N3dzYWFHV1d3d3d3d3d3d3N3d3d1NBZWcWdwcXZXZ1c1dXd3dSVxYUFzVxAEBAAEBAN3c3NzdzdwQAQHVzcgNjNgYWAQBgBDdnN3d3NWNDQEJCRjc3dzd3d3dFZXZwZ3d3d3d3d3d3dHV3d3d3d3FxQUFBR1NXF3VzclJ3dXFlcXdSVwUEAAQABzczc3N3M0AAAAACAgFzc3NgRDc0BENwAEc3N3JTdzdARBdHd3d3N3NhclJBR1B3d3d3d3d2dHd2dnd3d3d3d3d3d3B3d3QWVHV1d3NHc3dHBSFAAAQABDNzdzdzc3QAQEBAQHBzc3NzAQBzcANzcHACd0JWNzdxdwdzcHBzd3dHd3d1Z0B3d3d3d3d3d1dHV1cHd3d3d3d3d3dXR1d3dzd3N3QWEDc3MHN3MWAABTdSdzc3N3ADQAAEAAAHNzc3Nzc0dwBzdzQEN3BAYXdzRwc3N0JWN3N0Nzc3FhQ3cHJ3d3d3c3UlNDQld3d3d3d3d3BwcHBzdzd3N3c1JAd0BAcHMjcAA0NgAAA3c2EHNDQAQEBxc3Nzc3NzcHdzc3Nzc3AABAQ2F3N3d3c1YXcEQ3d3d3d3d3d1d3d3d3d3d0dHV3d3d3d3d3dHRWVlRld3d3dzc3NwAAAAc3NwMXM3MAADcwJSc3MwBAADAjNzc3NzdwAAAAAAAAAAAAAAAQUAAAAAAADlrQX+";
        BinaryArrayByteConverter converter = new BinaryArrayByteConverter();
        Byte[] bytes = (Byte[]) converter.convert(Byte[].class, base64Encoded);
        log.debug("length of bytes: " + bytes.length);
        assertNotNull(bytes);
        assertTrue(bytes.length > 10);
    }


    @Test
    public void stringToPrimitiveByteArrayTest() {
        String base64Encoded = "";
        BinaryArrayPrimitiveByteConverter converter = new BinaryArrayPrimitiveByteConverter();
        byte[] bytes = (byte[]) converter.convert(byte[].class, base64Encoded);
        log.debug("length of bytes: " + bytes.length);
        assertNotNull(bytes);
        assertTrue(bytes.length > 10);

    }

    @Test
    public void stringToGuidTest() {
        String guid = "12345678-aaaa-bbbb-cccc-ddddeeeeffff";
        StringConverter converter = new StringConverter();
        String converted = (String) converter.convert(String.class, guid);
        log.debug("Converted Guid: " + converted);
        assertEquals("converted and guid should be equal strings", converted, guid);
    }

    @Test
    public void stringToSingleTest() {
        String single = "23.8";
        FloatConverter converter = new FloatConverter();
        Float f = (Float) converter.convert(Float.class, single);
        log.debug("Got float value of: " + f.toString());
        assertTrue(f.compareTo(23.8F) == 0);

    }

    @Test
    public void stringToDecimalTest() {
        String strBigDecimal = "182.34523432";
        BigDecimalConverter converter = new BigDecimalConverter();
        BigDecimal bd = (BigDecimal) converter.convert(BigDecimal.class, strBigDecimal);
        log.debug("Got value of: " + bd.toString());
        assertTrue(bd.compareTo(new BigDecimal("182.34523432")) == 0);
    }


    @Test
    public void stringToInt16Test() {
        String str = "32521";
        ShortConverter converter = new ShortConverter();
        Short num = (Short) converter.convert(Short.class, str);
        log.debug("Value: " + num.shortValue());
        assertEquals("should have got value 32521", num.shortValue(), 32521);
    }

    @Test(expected = ConversionException.class)
    public void StringToInt16TooBigTest() {
        String tooBig = "70000";
        ShortConverter converter = new ShortConverter();
        Short tooBigShort = (Short) converter.convert(Short.class, tooBig);
        log.debug("Too big value (70000): " + tooBigShort.shortValue());

    }

    @Test
    public void stringToInt32Test() {
        String str = "-2001232288";
        int val = -2_001_232_288;
        IntegerConverter converter = new IntegerConverter();
        Integer num = (Integer) converter.convert(Integer.class, str);
        log.debug("Value: " + num.intValue());
        assertEquals("should have got value -2001232288", num.intValue(), val);
    }

    @Test
    public void stringToInt64Test() {
        String strLong = "-9222372036854775808";
        long val = -9_222_372_036_854_775_808L;
        LongConverter converter = new LongConverter();
        Long num = (Long) converter.convert(Long.class, strLong);
        log.debug("Got value: " + num.toString());
        assertEquals("Should be equal to val: " + val, num.longValue(), val);
    }

    @Test
    public void stringToDoubleTest() {
        String theDouble1 = "1E+10";
        double theVal1 = 10000000000.00D;
        String theDouble2 = "2.029";
        double theVal2 = 2.029D;
        String theDouble3 = "3.0";
        double theVal3 = 3.0D;
        DoubleConverter converter = new DoubleConverter();

        Double num = (Double) converter.convert(Double.class, theDouble1);
        log.debug("Got value of: " + num.doubleValue());
        assertTrue("Should be value: " + theVal1, num.compareTo(theVal1) == 0);

        num = (Double) converter.convert(Double.class, theDouble2);
        log.debug("Got value of: " + num.doubleValue());
        assertTrue("Should be value of: " + theVal2, num.compareTo(theVal2) == 0);

        num = (Double) converter.convert(Double.class, theDouble3);
        log.debug("Got value of: " + num.doubleValue());
        assertTrue("Should be value of: " + theVal3, num.compareTo(theVal3) == 0);
    }

}
